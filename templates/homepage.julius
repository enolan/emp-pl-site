$("#demoForm").submit(function (ev) {
    ev.preventDefault();

    let submitBtn = getSubmitBtn();
    submitBtn.disabled = true;
    submitBtn.innerHTML = "Hold on a sec..."

    $.ajax({
        method: "POST",
        url: "@{DemoFormR}",
        data: $(this).serializeArray(),
        error: function (jqXHR, textStatus, errorThrown){
            submitBtn.innerHTML = "Oh no, something went wrong!";
            let errorBox = $("#demoForm .error-container")[0];
            errorBox.style.display = "block";
            errorBox.innerHTML = errorThrown;
        },
        success: function (data, textStatus, jqxhr){
            $("#demoForm").css({"max-height": "0em", "opacity": "0"});
            $("#ratingsBox").css("display", "block")
            $("#ratingsBox").addClass("fade in");
        }
    })
})

function updatePointsTable(prgmScoreEl) {
    let totalBudgetEl = $("#total-budget");
    let availablePointsEl = $("#available-points");
    let averagePointsEl = $("#average-points-spent");
    let scores = $("#ratings-table input.program-name[readonly]")
        .parent().parent().find("span.score").map(
            function (idx, el) {return el.textContent;});

    let pointsSpent = 0;
    let totalScore = 0;
    for (let score of scores.get()) {
        pointsSpent += score * score;
        totalScore += score;
    }

    let totalBudget = scores.length * 25
    let availablePoints = totalBudget - pointsSpent;
    totalBudgetEl.text(totalBudget);
    availablePointsEl.text(availablePoints);
    if (scores.length > 0) {
        averagePointsEl.text((pointsSpent/scores.length).toFixed(2));
    } else {
        averagePointsEl.text("N/A");
    }
    if (availablePoints < 0) {
        setOverbudget(prgmScoreEl, function () {
            let prgmScore = Number.parseInt(prgmScoreEl.text());
            if (prgmScore > 0) {
                prgmScore--;
            } else {
                prgmScore++;
            }
            prgmScoreEl.text(prgmScore);
            prgmScoreEl.parent().parent().find("span.cost").text(prgmScore * prgmScore);
            updatePointsTable(prgmScoreEl);
        });
        return false;
    } else if (prgmScoreEl !== undefined) {
        return true;
    }
}

function setOverbudget(el, cb) {
    el.addClass("overbudget");
    let availPointsEl = $("#available-points");
    let scoreButtons = $(".btn-score");
    availPointsEl.addClass("overbudget");
    scoreButtons.prop("disabled", true);
    window.setTimeout(function () {
        cb();
        el.removeClass("overbudget");
        availPointsEl.removeClass("overbudget");
        scoreButtons.prop("disabled", false);
    }, 500);
}
$("#explanationButton").click(function (ev) {
    ev.preventDefault();
    clearExampleData();
})

function clearExampleData() {
    $("#explainBox").
        css({"max-height": "0em", "opacity": "0", "padding": "0em"});

    $("#ratings-table .example-data").remove();
    updatePointsTable();
}

function handleProgramNameChange (ev) {
    ev.target.setAttribute("readonly", "true");
    let el =
        $("<tr>")
        .append($("<td>")
                .append($("<button>")
                        .addClass("btn-minus btn-score")))
        .append($("<td>")
                .addClass("program-name")
                .append($("<input>")
                        .addClass("program-name")
                        .attr("type", "text")
                        .change(handleProgramNameChange)))
        .append($("<td>")
                .append($("<button>")
                        .addClass("btn-plus btn-score")))
        .append($("<td>")
                .append($("<span>")
                        .text("0")
                        .addClass("score")))
        .append($("<td>")
                .append($("<span>")
                        .text("0")
                        .addClass("cost")))
        .append($("<td>")
                .append($("<button>")
                        .addClass("btn-score btn-delete")));
    let evTr = $(ev.target).parent().parent();
    evTr.find("button.btn-score").click(handleScoreButton);
    evTr.addClass("pending");
    clearExampleData();
    $("#ratings-table").append(el);
    updatePointsTable(el);
    $.ajax({
        method: "POST",
        url: "@{RatingR}",
        data: {action: "new", prgmName: $(ev.target).val(), prgmScore: 0},
        success: function (data, textStatus, jqxhr) {
            evTr.removeClass("pending");
        }
    })
}

$("input.program-name:not([readonly])").change(handleProgramNameChange);

function handleScoreButton(ev) {
    let tr = $(this.parentNode.parentNode);
    let prgmName = tr.find("input.program-name").val();
    let action = "";
    let prgmScoreEl = tr.find("span.score");
    let prgmScore = Number.parseInt(prgmScoreEl.text());
    let prgmCostEl = tr.find("span.cost");
    let prgmCost = Number.parseInt(prgmCostEl.text());
    if($(this).hasClass("btn-plus")) {
        action = "plus";
    } else if ($(this).hasClass("btn-minus")) {
        action = "minus";
    } else if ($(this).hasClass("btn-delete")) {
        action = "delete";
    } else {
        throw "score button with no valid class!";
    }
    switch (action) {
    case "plus":
        prgmScoreEl.text(++prgmScore);
        break;
    case "minus":
        prgmScoreEl.text(--prgmScore);
        break;
    case "delete":
        let availPointsEl = $("#available-points");
        let availPoints = Number.parseInt(availPointsEl.text());
        if (availPoints + prgmCost - 25 >= 0) {
            // if deleting the entry wouldn't make us go negative
            if (!tr.hasClass("example-data")) {
                tr.addClass("pending");
                $.ajax({
                    method: "DELETE",
                    url: "@{RatingR}",
                    data: {prgmName: prgmName},
                    success: function (data, textStatus, jqxhr) {
                        tr.remove();
                        updatePointsTable();
                    }
                });
            } else {
                tr.remove();
                updatePointsTable();
            }
        } else {
            setOverbudget(tr, function() {});
        }
        return;
    }
    prgmCostEl.text(prgmScore * prgmScore);
    let okay = updatePointsTable(prgmScoreEl);
    if (okay && !tr.hasClass("example-data")) {
        tr.addClass("pending");
        $.ajax({
            method: "POST",
            url: "@{RatingR}",
            data: {action: action, prgmName: prgmName, prgmScore: prgmScore},
            success: function (data, textStatus, jqxhr) {
                tr.removeClass("pending");
            }
        });
    }
}

$("input.program-name[readonly]").parent().parent().find("button.btn-score").
    click(handleScoreButton);

function getSubmitBtn () {
    return $("#demoForm button[type=submit]")[0];
}
